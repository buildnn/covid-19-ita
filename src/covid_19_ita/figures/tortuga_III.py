# -*- coding: utf-8 -*-
"""articolo III.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jBcPlGasHxrncY6_G9ASAuQfHkXCZpWJ
"""

import os
import pandas as pd
import plotly.express as px
from covid_19_ita import HTML_DIR
from covid_19_ita.utils import watermark

EXPORT_DIR = os.path.join(HTML_DIR, "figures", "tortuga", "III")


def add_source(fig):
    fig.update_layout(
        annotations=[
            dict(
                xref="paper",
                yref="paper",
                x=0.5,
                y=-0.4,
                xanchor="center",
                yanchor="bottom",
                text="Fonte: elaborazione Tortuga su dati ISTAT",
                font=dict(family="Arial", size=12, color="rgb(150,150,150)"),
                showarrow=False,
            ),
        ],
    )
    return fig


if __name__ == "__main__":
    medici_df = pd.read_csv(
        "https://docs.google.com/spreadsheets/d/e/"
        "2PACX-1vRNSiOhlGO4r2Dh2cSr2zJbQ-iUfqqbQojs"
        "aTe4z1omzhuIjI_fzJCoD3EFNzgCeXMeX-3cVsZK1hZS/pub?output=csv"
    )
    medici_df = medici_df.dropna(subset=["Regione"])
    medici_df.replace("PA_bolzano", "P.A. Bolzano")
    medici_df.replace("PA_trento", "P.A. Trento")
    medici_df = medici_df[medici_df.Regione != ""]
    medici_df

    rientro = pd.read_csv(
        "https://docs.google.com/spreadsheets/d/e/"
        "2PACX-1vRNSiOhlGO4r2Dh2cSr2zJbQ-iUfqqbQojs"
        "aTe4z1omzhuIjI_fzJCoD3EFNzgCeXMeX-3cVsZK1hZS/pub?output=csv"
        "&gid=518867510"
    )

    melted = medici_df.melt(
        id_vars=["Regione", "Anno", "Adempiente"],
        value_vars=["Medici_spec", "Medici_tot", "Prof_san"],
        value_name="N. Per 1000 Abitanti",
        var_name="Tipologia Operatori",
    )
    melted

    mappa_nomi = {
        "Medici_spec": "Medici Specializzati",
        "Medici_tot": "Totale Medici",
        "Prof_san": "Professioni Sanitarie",
    }

    for old, new in mappa_nomi.items():
        melted = melted.replace(old, new)
    # melted.replace(mappa_nomi).to_csv("tIII_medici.csv",)

    # --- CHARTS

    f1 = px.box(
        melted,
        x="Anno",
        y="N. Per 1000 Abitanti",
        color="Tipologia Operatori",
        points="all",
        template="plotly_white",
        hover_data=["Regione"],
        orientation="v",
        labels=mappa_nomi,
    ).update_layout(
        title="<br><b>Personale Sanitario Per 1000 abitanti</b></br>"
        '<span style="font-size: 14px;">Distribuzione nel Tempo del Valore per Regione</span>',
        title_x=0.5,
        title_y=0.96,
        width=600,
        height=450,
        margin={"r": 20, "b": 110, "t": 80, "l": 40, "autoexpand": False},
        legend_orientation="h",
        legend={"y": -0.21},
        xaxis=dict(showgrid=True, zeroline=False),
        yaxis=dict(showgrid=True, zeroline=False),
    )
    add_source(f1)
    watermark(f1)
    f1.write_html(
        os.path.join(EXPORT_DIR, "fig_0001.html"),
        include_plotlyjs="cdn",
        config={
            # "displayModeBar": True,
            "displaylogo": False,
            # 'hoverCompareCartesian': True,
        },
    )
    f1

    for n, (ramo, lb) in enumerate(mappa_nomi.items()):
        f2 = px.box(
            medici_df.dropna(subset=["Adempiente"]),
            x="Anno",
            y=ramo,
            color="Adempiente",
            width=960,
            points="all",
            template="plotly_white",
            hover_data=["Regione"],
            orientation="v",
            title="Ramo: " + lb,
            labels={ramo: "N. Per 1000 ab."},
        ).update_layout(
            title="<br><b>Personale Sanitario Per 1000 abitanti</b></br>"
            f'<span style="font-size: 14px;">{lb}: Regioni Adempienti vs. Non Adempienti</span>',
            title_x=0.5,
            title_y=0.96,
            width=600,
            height=450,
            margin={"r": 20, "b": 110, "t": 80, "l": 40, "autoexpand": False},
            legend_orientation="h",
            legend={"y": -0.21},
            xaxis=dict(showgrid=True, zeroline=False),
            yaxis=dict(showgrid=True, zeroline=False),
        )
        add_source(f2)
        watermark(f2)
        f2.write_html(
            os.path.join(EXPORT_DIR, f"fig_{2+n:04d}.html"),
            include_plotlyjs="cdn",
            config={
                # "displayModeBar": True,
                "displaylogo": False,
                # 'hoverCompareCartesian': True,
            },
        )
        f2.show()

    f5 = px.line(
        medici_df,
        x="Anno",
        y="Medici_spec",
        color="Regione",
        template="plotly_dark",
    ).update_layout(
        title="<b>Punteggio LEA per Regione nel Tempo</b>",
        title_x=0.5,
        title_y=0.96,
        width=600,
        height=450,
        margin={"r": 20, "b": 110, "t": 80, "l": 40, "autoexpand": False},
        legend_orientation="h",
        # legend={"y": -0.25},
        xaxis=dict(showgrid=True, zeroline=False, title=None),
        yaxis=dict(showgrid=True, zeroline=False),
    )
    watermark(f5)
    f5.write_html(
        os.path.join(EXPORT_DIR, f"fig_0005.html"),
        include_plotlyjs="cdn",
        config={
            # "displayModeBar": True,
            "displaylogo": False,
            # 'hoverCompareCartesian': True,
        },
    )

    # f6-7
    for n, var in enumerate(["Medici_spec", "Prof_san"]):
        lb = mappa_nomi[var]
        f6 = px.line(
            medici_df,
            x="Anno",
            y=var,
            color="Regione",
            template="plotly_white",
            line_shape="spline",
            # facet_row="Adempiente",
            # line_dash="Regione",
            labels=mappa_nomi,
            color_discrete_sequence=px.colors.qualitative.T10,
            width=600,
            height=700,
        )
        for trace in f6.data:
            trace.update(mode="markers+lines")
        f6.update_layout(
            height=600,
            width=600,
            legend=dict(orientation="h", y=-0.18),
            margin={"r": 20, "l": 60, "t": 80, "b": 230, "autoexpand": False},
            title=dict(
                text=f"<b>{lb} per Regione</b>", x=0.5, xanchor="center",
            ),
            xaxis=dict(showgrid=True, zeroline=False, title=None),
            yaxis=dict(
                showgrid=True, zeroline=False, title="Numero per 1000 abitanti"
            ),
            annotations=[
                dict(
                    xref="paper",
                    yref="paper",
                    x=0.5,
                    y=-0.72,
                    xanchor="center",
                    yanchor="bottom",
                    text="Fonte: elaborazione Tortuga su dati ISTAT",
                    font=dict(
                        family="Arial", size=12, color="rgb(150,150,150)"
                    ),
                    showarrow=False,
                ),
            ],
        )
        watermark(f6)
        f6.show()
        f6.write_html(
            os.path.join(EXPORT_DIR, f"fig_{6+n:04d}.html"),
            include_plotlyjs="cdn",
            config={
                # "displayModeBar": True,
                "displaylogo": False,
                # 'hoverCompareCartesian': True,
            },
        )

    #f8-9
    for n, var in enumerate(["Totale medici", "Professioni sanitarie"]):
        f8 = px.bar(
            rientro.query(f"Var == '{var}'"),
            x="Anno",
            y="Variazione media",
            barmode="group",
            color="Tipo",
            template="plotly_white",
        )
        f8.update_layout(
            width=600,
            height=450,
            legend=dict(orientation="h", y=-0.18),
            margin={"r": 20, "b": 110, "t": 80, "l": 60, "autoexpand": False},
            title=dict(
                text=f"<br><b>{var}</b></br>Variazione Media vs. Anno Precedente",
                x=0.5,
                y=.96,
                xanchor="center",
            ),
            xaxis=dict(showgrid=True, zeroline=False),
            yaxis=dict(
                showgrid=True,
                zeroline=False,
                title="Numero per 1000 abitanti",
                tickformat=",.1%",
            ),
        )
        add_source(f8)
        watermark(f8)
        f8.show()
        f8.write_html(
            os.path.join(EXPORT_DIR, f"fig_{15+n:04d}.html"),
            include_plotlyjs="cdn",
            config={
                # "displayModeBar": True,
                "displaylogo": False,
                # 'hoverCompareCartesian': True,
            },
        )

    # for Y in ["LEA", "Medici_spec", "Medici_tot", "Prof_san"]:

    #     f4 = px.line(
    #         medici_df.assign(Anno=pd.to_datetime(medici_df.Anno.astype(str))).dropna(
    #             subset=[Y]
    #         ),
    #         x="Anno",
    #         y=Y,
    #         color="Regione",
    #         template="plotly_white",
    #         line_shape="spline",
    #         # facet_row="Adempiente",
    #         # line_dash="Regione",
    #         labels=mappa_nomi,
    #         color_discrete_sequence=px.colors.qualitative.T10,
    #         width=600,
    #         height=700,
    #     )
    #     for trace in fig.data:
    #         trace.update(mode="markers+lines")
    #     fig.update_layout(
    #         legend=dict(orientation="h"),
    #         title=dict(
    #             text=f"{mappa_nomi.get(Y, Y)} per Regione", x=0.5, xanchor="center"
    #         ),
    #         xaxis=dict(showgrid=True, zeroline=False),
    #         yaxis=dict(showgrid=True, zeroline=False),
    #     )

    #     fig.show()
