# -*- coding: utf-8 -*-
"""articolo III.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jBcPlGasHxrncY6_G9ASAuQfHkXCZpWJ
"""

import os
import pandas as pd
import plotly.express as px
from covid_19_ita import HTML_DIR

EXPORT_DIR = os.path.join(HTML_DIR, "figures", "tortuga", "III")


def add_buildnn_watermark(fig):
    fig.update_layout(
        images=[
            dict(
                source="https://media-exp1.licdn.com/dms/image/C4D0BAQFsEw0kedrArQ/company-logo_200_200/0?e=1593043200&v=beta&t=UJ-7KQbrKQz-6NUbBCP706EzxNQVzt9ZftyH_Z46oNo",
                xref="paper",
                yref="paper",
                x=1.05,
                y=1.16,
                sizex=0.12,
                sizey=0.12,
                xanchor="right",
                yanchor="bottom",
            )
        ],
        annotations=[
            dict(
                text='<span  style="font-size: 9px">by '
                '<a href="https://www.buildnn.com">BuildNN</a></span>',
                showarrow=False,
                xref="paper",
                yref="paper",
                x=1.06,
                y=1.09,
                xanchor="right",
                yanchor="bottom",
            ),
            dict(
                xref="paper",
                yref="paper",
                x=0.5,
                y=-0.4,
                xanchor="center",
                yanchor="bottom",
                text="Fonte: elaborazione Tortuga su dati ISTAT",
                font=dict(family="Arial", size=12, color="rgb(150,150,150)"),
                showarrow=False,
            ),
        ],
    )
    return fig


if __name__ == "__main__":
    medici_df = pd.read_csv(
        "https://docs.google.com/spreadsheets/d/e/"
        "2PACX-1vRNSiOhlGO4r2Dh2cSr2zJbQ-iUfqqbQojs"
        "aTe4z1omzhuIjI_fzJCoD3EFNzgCeXMeX-3cVsZK1hZS/pub?output=csv"
    )
    medici_df = medici_df.dropna(subset=["Regione"])
    medici_df.replace("PA_bolzano", "P.A. Bolzano")
    medici_df.replace("PA_trento", "P.A. Trento")
    medici_df = medici_df[medici_df.Regione != ""]
    medici_df

    melted = medici_df.melt(
        id_vars=["Regione", "Anno", "Adempiente"],
        value_vars=["Medici_spec", "Medici_tot", "Prof_san"],
        value_name="N. Per 1000 Abitanti",
        var_name="Tipologia Operatori",
    )
    melted

    mappa_nomi = {
        "Medici_spec": "Medici Specializzati",
        "Medici_tot": "Totale Medici",
        "Prof_san": "Professioni Sanitarie",
    }

    for old, new in mappa_nomi.items():
        melted = melted.replace(old, new)
    # melted.replace(mappa_nomi).to_csv("tIII_medici.csv",)

    # --- CHARTS

    f1 = px.box(
        melted,
        x="Anno",
        y="N. Per 1000 Abitanti",
        color="Tipologia Operatori",
        points="all",
        template="plotly_white",
        hover_data=["Regione"],
        orientation="v",
        labels=mappa_nomi,
    ).update_layout(
        title="<br><b>Personale Sanitario Per 1000 abitanti</b></br>"
        "Distribuzione nel Tempo del Valore per Regione",
        title_x=0.5,
        title_y=0.94,
        width=600,
        height=450,
        margin={"r": 40, "b": 110, "t": 80, "l": 40},
        legend_orientation="h",
        legend={"y": -0.21},
        xaxis=dict(showgrid=True, zeroline=False),
        yaxis=dict(showgrid=True, zeroline=False),
    )
    add_buildnn_watermark(f1)
    f1.write_html(
        os.path.join(EXPORT_DIR, "box_01.html"),
        include_plotlyjs="cdn",
        config={
            # "displayModeBar": True,
            "displaylogo": False,
            # 'hoverCompareCartesian': True,
        },
    )
    f1

    for ramo, lb in mappa_nomi.items():
        f2 = px.box(
            medici_df.dropna(subset=["Adempiente"]),
            x="Anno",
            y=ramo,
            color="Adempiente",
            width=960,
            points="all",
            template="plotly_white",
            hover_data=["Regione"],
            orientation="v",
            title="Ramo: " + lb,
            labels={ramo: "N. Per 1000 ab."},
        ).update_layout(
            title="<br><b>Personale Sanitario Per 1000 abitanti</b></br>"
            f"{lb}: Adempienti vs. Non Adempienti",
            title_x=0.5,
            title_y=0.94,
            width=600,
            height=450,
            margin={"r": 40, "b": 110, "t": 80, "l": 40},
            legend_orientation="h",
            legend={"y": -0.21},
            xaxis=dict(showgrid=True, zeroline=False),
            yaxis=dict(showgrid=True, zeroline=False),
        )
        add_buildnn_watermark(f2)
        f2.write_html(
            os.path.join(EXPORT_DIR, f"box_02{ramo}.html"),
            include_plotlyjs="cdn",
            config={
                # "displayModeBar": True,
                "displaylogo": False,
                # 'hoverCompareCartesian': True,
            },
        )
        f2.show()

    # f3 = px.bar(
    #     medici_df,
    #     x="Regione",
    #     y="LEA",
    #     animation_frame="Anno",
    #     animation_group="Regione",
    #     color="LEA",
    #     color_continuous_scale=px.colors.cyclical.IceFire[1:-1],
    #     template="plotly_dark",
    # ).update_layout(
    #     title="<b>Punteggio LEA per Regione nel Tempo</b>",
    #     title_x=0.5,
    #     title_y=0.94,
    #     width=600,
    #     height=450,
    #     margin={"r": 40, "b": 160, "t": 80, "l": 40},
    #     legend_orientation="h",
    #     legend={"y": -0.25},
    #     xaxis=dict(showgrid=True, zeroline=False, title=None),
    #     yaxis=dict(showgrid=True, zeroline=False),
    # )
    # f3.write_html(
    #     os.path.join(EXPORT_DIR, f"fig_03.html"),
    #     include_plotlyjs="cdn",
    #     config={
    #         # "displayModeBar": True,
    #         "displaylogo": False,
    #         # 'hoverCompareCartesian': True,
    #     },
    # )
    # f3

    # for Y in ["LEA", "Medici_spec", "Medici_tot", "Prof_san"]:

    #     fig = px.line(
    #         medici_df.assign(Anno=pd.to_datetime(medici_df.Anno.astype(str))).dropna(
    #             subset=[Y]
    #         ),
    #         x="Anno",
    #         y=Y,
    #         color="Regione",
    #         template="plotly_white",
    #         line_shape="spline",
    #         # facet_row="Adempiente",
    #         # line_dash="Regione",
    #         labels=mappa_nomi,
    #         color_discrete_sequence=px.colors.qualitative.T10,
    #         width=600,
    #         height=700,
    #     )
    #     for trace in fig.data:
    #         trace.update(mode="markers+lines")
    #     fig.update_layout(
    #         legend=dict(orientation="h"),
    #         title=dict(
    #             text=f"{mappa_nomi.get(Y, Y)} per Regione", x=0.5, xanchor="center"
    #         ),
    #         xaxis=dict(showgrid=True, zeroline=False),
    #         yaxis=dict(showgrid=True, zeroline=False),
    #     )

    #     fig.show()
